import cv2
import time
import csv
from datetime import datetime

# Parámetros configurables
INTERVALO_SEGUNDOS = 60  # Para pruebas. Usa 3600 para 1 hora

# Cargar modelo
net = cv2.dnn.readNetFromCaffe(
    'MobileNetSSD_deploy.prototxt',
    'MobileNetSSD_deploy.caffemodel'
)

CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
           "bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
           "dog", "horse", "motorbike", "person", "pottedplant",
           "sheep", "sofa", "train", "tvmonitor"]

# Inicialización
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print(" No se pudo abrir la cámara.")
    exit()

inicio_intervalo = time.time()
personas_intervalo = 0

# CSV donde se guarda el conteo por intervalos
with open('conteo_intervalos.csv', mode='a', newline='') as archivo:
    writer = csv.writer(archivo)
    writer.writerow(['Fecha y hora', 'Personas detectadas'])

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        h, w = frame.shape[:2]
        blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)),
                                     0.007843, (300, 300), 127.5)

        net.setInput(blob)
        detections = net.forward()

        conteo_personas_frame = 0

        for i in range(detections.shape[2]):
            confidence = detections[0, 0, i, 2]
            if confidence > 0.5:
                idx = int(detections[0, 0, i, 1])
                if CLASSES[idx] == "person":
                    conteo_personas_frame += 1
                    box = detections[0, 0, i, 3:7] * [w, h, w, h]
                    (startX, startY, endX, endY) = box.astype("int")
                    cv2.rectangle(frame, (startX, startY), (endX, endY), (0, 255, 0), 2)

        # Acumular en el intervalo
        personas_intervalo += conteo_personas_frame

        # Mostrar en pantalla
        cv2.putText(frame, f'Personas detectadas: {conteo_personas_frame}', (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        cv2.imshow("Detección", frame)

        # Verificar si terminó el intervalo
        if time.time() - inicio_intervalo >= INTERVALO_SEGUNDOS:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"🕒 Intervalo finalizado - {timestamp}: {personas_intervalo} personas")

            # Guardar en CSV
            writer.writerow([timestamp, personas_intervalo])
            archivo.flush()

            # Reiniciar
            inicio_intervalo = time.time()
            personas_intervalo = 0

        # Salir con 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()
